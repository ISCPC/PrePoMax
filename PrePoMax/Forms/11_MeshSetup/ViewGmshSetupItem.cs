using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using CaeMesh;
using CaeGlobals;
using System.ComponentModel;
using DynamicTypeDescriptor;
using CaeMesh.Meshing;

namespace PrePoMax.Forms
{
    [Serializable]
    public class ViewGmshSetupItem : ViewMeshSetupItem
    {
        // Variables                                                                                                                
        private GmshSetupItem _gmshSetupItem;


        // Properties                                                                                                               
        [CategoryAttribute("Data")]
        [OrderedDisplayName(0, 10, "Name")]
        [DescriptionAttribute("Name of the mesh setup item.")]
        public override string Name { get { return _gmshSetupItem.Name; } set { _gmshSetupItem.Name = value; } }
        //
        [CategoryAttribute("Data")]
        [OrderedDisplayName(1, 10, "2D meshing algorithm")]
        [DescriptionAttribute("Select the algorithm for the surface meshing.")]
        public GmshAlgorithmMesh2DEnum AlgorithmMesh2D
        {
            get { return _gmshSetupItem.AlgorithmMesh2D; }
            set { _gmshSetupItem.AlgorithmMesh2D = value; }
        }
        //
        [CategoryAttribute("Data")]
        [OrderedDisplayName(2, 10, "3D meshing algorithm")]
        [DescriptionAttribute("Select the algorithm for the volume meshing.")]
        public GmshAlgorithmMesh3DEnum AlgorithmMesh3D
        {
            get { return _gmshSetupItem.AlgorithmMesh3D; }
            set { _gmshSetupItem.AlgorithmMesh3D = value; }
        }
        //
        [CategoryAttribute("Data")]
        [OrderedDisplayName(3, 10, "Recombine algorithm")]
        [DescriptionAttribute("Select the algorithm for recombination of triangles into quads.")]
        public GmshAlgorithmRecombineEnum AlgorithmRecombine
        {
            get { return _gmshSetupItem.AlgorithmRecombine; }
            set { _gmshSetupItem.AlgorithmRecombine = value; UpdateVisibility(); }
        }
        //
        [CategoryAttribute("Data")]
        [OrderedDisplayName(4, 10, "Recombine min quality")]
        [DescriptionAttribute("Minimum quality for quadrangles generated by recombination.")]
        public double RecombineMinQuality
        {
            get { return _gmshSetupItem.RecombineMinQuality; }
            set { _gmshSetupItem.RecombineMinQuality = value; }
        }
        //
        [CategoryAttribute("Data")]
        [OrderedDisplayName(5, 10, "Transfinite")]
        [DescriptionAttribute("Use automatic transfinite meshing constraints on the entire model.")]
        public bool Transfinite
        {
            get { return _gmshSetupItem.Transfinite; }
            set { _gmshSetupItem.Transfinite = value; UpdateVisibility(); }
        }
        //
        [CategoryAttribute("Data")]
        [OrderedDisplayName(6, 10, "Transfinite threshold angle")]
        [DescriptionAttribute("Quadrangular faces with a corner angle larger than the threshold angle are ignored.")]
        [TypeConverter(typeof(StringAngleDegConverter))]
        public double TransfiniteAngleDeg
        {
            get { return _gmshSetupItem.TransfiniteAngleDeg; }
            set { _gmshSetupItem.TransfiniteAngleDeg = value; }
        }
        //
        [CategoryAttribute("Element size")]
        [OrderedDisplayName(0, 10, "Defined by")]
        [DescriptionAttribute("Select how the element size is defined.")]
        public ElementSizeTypeEnum ElementSizeType
        {
            get { return _gmshSetupItem.ElementSizeType; }
            set { _gmshSetupItem.ElementSizeType = value; UpdateVisibility(); }
        }
        //
        [CategoryAttribute("Element size")]
        [OrderedDisplayName(1, 10, "Number of layers")]
        [DescriptionAttribute("Enter the number of layers for the mesh construction.")]
        public int NumberOfLayers { get { return _gmshSetupItem.NumberOfLayers; } set { _gmshSetupItem.NumberOfLayers = value; } }
        //
        [CategoryAttribute("Element size")]
        [OrderedDisplayName(2, 10, "Scale factor")]
        [DescriptionAttribute("Enter the scale factor for the finite element size in the mesh construction direction.")]
        public double ElementScaleFactor
        {
            get { return _gmshSetupItem.ElementScaleFactor; }
            set { _gmshSetupItem.ElementScaleFactor = value; }
        }


        // Constructors                                                                                                             
        public ViewGmshSetupItem()
        {
        }


        // Methods                                                                                                                  
        public void SetBase(GmshSetupItem gmshSetupItem)
        {
            _gmshSetupItem = gmshSetupItem;                         // 1 command
            _dctd = ProviderInstaller.Install(this);                // 2 command
            //
            UpdateVisibility();
            //
            _dctd.RenameBooleanPropertyToYesNo(nameof(Transfinite));
        }
        public override MeshSetupItem GetBase()
        {
            return _gmshSetupItem;
        }
        public void UpdateVisibility()
        {
            // Recombine
            if (_dctd.GetProperty(nameof(AlgorithmRecombine)).IsBrowsable)
            {
                if (AlgorithmRecombine == GmshAlgorithmRecombineEnum.None)
                {
                    _dctd.GetProperty(nameof(RecombineMinQuality)).SetIsBrowsable(false);
                }
                else
                {
                    _dctd.GetProperty(nameof(RecombineMinQuality)).SetIsBrowsable(true);
                }
            }
            // Transfinite
            if (_dctd.GetProperty(nameof(Transfinite)).IsBrowsable)
            {
                _dctd.GetProperty(nameof(TransfiniteAngleDeg)).SetIsBrowsable(Transfinite);
            }
            // Element size
            if (_dctd.GetProperty(nameof(ElementSizeType)).IsBrowsable)
            {
                if (_gmshSetupItem.ElementSizeType == ElementSizeTypeEnum.NumberOfLayers)
                {
                    _dctd.GetProperty(nameof(NumberOfLayers)).SetIsBrowsable(true);
                    _dctd.GetProperty(nameof(ElementScaleFactor)).SetIsBrowsable(false);
                }
                else if (_gmshSetupItem.ElementSizeType == ElementSizeTypeEnum.ScaleFactor)
                {
                    _dctd.GetProperty(nameof(NumberOfLayers)).SetIsBrowsable(false);
                    _dctd.GetProperty(nameof(ElementScaleFactor)).SetIsBrowsable(true);
                }
                else throw new NotImplementedException("ExtrudedElementSizeTypeEnumException");
            }
        }
    }
}

